rules_version = '2';

function getIncomingAuth() {
  return request.auth;
}
function getIncomingId() {
  return request.resource.id;
}
function getIncomingData() {
  return request.resource.data;
}
function isNow(dt) {
  return dt is timestamp && dt == request.time;
}
function getExistingData() {
  return resource.data;
}
function getParams() {
  return resource.data;
}

service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow create, update, get, list, delete: if false;
    }

    function getBalanceDoc(id){
      return get(/databases/$(database)/documents/balances/$(id)).data;
    }
    function getFileDoc(id){
      return get(/databases/$(database)/documents/files/$(id)).data;
    }

    match /balances/{id} {
      function getBalanceKeys(){
        return ['id','uid','couponStream','numberOfCoupons','createdAt','updatedAt'];
      }
      function checkBalanceDataTypes(){
        let incoming = getIncomingData();
        let keys = getBalanceKeys();

        return incoming.keys().hasAll(keys)
          && incoming.keys().hasOnly(keys)
          && incoming.id == getIncomingId()
          && incoming.uid == getIncomingAuth().uid
          && incoming.couponStream is number
          && incoming.numberOfCoupons is number
          && incoming.createdAt is timestamp
          && incoming.updatedAt is timestamp
      }
      function canCreateBalance(){
        let incoming = getIncomingData();

        return checkBalanceDataTypes()
          && incoming.id == getIncomingAuth().uid
          && incoming.uid == getIncomingAuth().uid
          && incoming.numberOfCoupons == 10
          && incoming.couponStream == 0
          && isNow(incoming.createdAt)
          && isNow(incoming.updatedAt)
      }
      function canUpdateBalance(){
        let incoming = getIncomingData();
        let existing = getExistingData();
        let diff = incoming.diff(existing);
        let auth = getIncomingAuth();
        let fileId = auth.uid + '_' + string(existing.couponStream) + '_' + string(existing.numberOfCoupons); 
        let file = getFileDoc(fileId); 

        return checkBalanceDataTypes()
          && diff.affectedKeys().hasOnly(['numberOfCoupons','updatedAt'])
          && isNow(incoming.updatedAt)
          && incoming.numberOfCoupons == existing.numberOfCoupons - 1
          && incoming.numberOfCoupons >= 0
          && file.id == fileId
      }

      function canGetBalance(id){
        let auth = getIncomingAuth();

        return id == auth.uid
      }
      
      allow create: if canCreateBalance();
      allow update: if canUpdateBalance();
      allow get: if canGetBalance(id);
      allow list: if false;
      allow delete: if false;
    }
    match /files/{id} {
      function getFileKeys(){
        return ['id', 'uid', 'fileName', 'encryptedFileName', 'serializedEncryptionKeySalt', 'serializedInitializationVector', 'createdAt', 'updatedAt'];
      }
      function checkFileDataTypes(){
        let incoming = getIncomingData();
        let keys = getFileKeys();

        return incoming.keys().hasAll(keys)
          && incoming.keys().hasOnly(keys)
          && incoming.id == getIncomingId()
          && incoming.uid == getIncomingAuth().uid
          && incoming.fileName is string
          && incoming.encryptedFileName is string
          && incoming.serializedEncryptionKeySalt is string
          && incoming.serializedInitializationVector is string
          && incoming.createdAt is timestamp
          && incoming.updatedAt is timestamp
      }
      function canCreateFile(){
        let incoming = getIncomingData();
        let auth = getIncomingAuth();
        let balance = getBalanceDoc(auth.uid);
        let id = auth.uid + '_' + string(balance.couponStream) + '_' + string(balance.numberOfCoupons);

        return checkFileDataTypes()
          && incoming.id == id
          && isNow(incoming.createdAt)
          && isNow(incoming.updatedAt)
          && balance.numberOfCoupons > 0
      }
      function canGetFile(){
        let auth = getIncomingAuth();
        let existing = getExistingData();

        return existing.uid == auth.uid
      }

      function canListFiles(){
        let auth = getIncomingAuth();
        let params = getParams();

        return params.uid == auth.uid
      }
      
      allow create: if canCreateFile();
      allow get: if canGetFile();
      allow list: if canListFiles();
      allow update: if false;
      allow delete: if false;
    }
    
    match /paymentIntents/{id} {
      function getPaymentIntentKeys(){
        return ['id', 'uid', 'createdAt', 'updatedAt'];
      }
      function checkPaymentIntentDataTypes(){
        let incoming = getIncomingData();
        let keys = getPaymentIntentKeys();

        return incoming.keys().hasAll(keys)
          && incoming.keys().hasOnly(keys)
          && incoming.id == getIncomingId()
          && incoming.createdAt is timestamp
          && incoming.updatedAt is timestamp
      }
      function canCreatePaymentIntent(){
        let incoming = getIncomingData();
        let incomingId = getIncomingId();
        let auth = getIncomingAuth();
        
        return checkPaymentIntentDataTypes()
          && incoming.id == incomingId
          && incoming.uid == auth.uid
          && isNow(incoming.createdAt)
          && isNow(incoming.updatedAt)
      }

      allow create: if canCreatePaymentIntent();
      allow get: if false;
      allow list: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}