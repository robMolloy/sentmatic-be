rules_version = '2';

function getIncomingAuth() {
  return request.auth;
}
function getIncomingId() {
  return request.resource.id;
}
function getIncomingData() {
  return request.resource.data;
}
function isNow(dt) {
  return dt is timestamp && dt == request.time;
}
function getExistingData() {
  return resource.data;
}
// function getParams() {
//   return resource.data;
// }

service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow create, update, get, list, delete: if false;
    }

    // function getBalanceDoc(id){
    //   return get(/databases/$(database)/documents/balances/$(id)).data;
    // }

    // function getFileDoc(id){
    //   return get(/databases/$(database)/documents/files/$(id)).data;
    // }

    match /balanceDocs/{id} {
      function getBalanceDocKeys(){
        return ['id','uid','value','currentUploadIntentNumber','uploadIntentIds','createdAt','updatedAt'];
      }
      function checkBalanceDocDataTypes(){
        let incoming = getIncomingData();
        let keys = getBalanceDocKeys();
        let auth = getIncomingAuth();

        return incoming.keys().hasAll(keys) // BL.CDT.1.D
          && incoming.keys().hasOnly(keys) // BL.CDT.2.D
          && incoming.id == getIncomingId() // BL.CDT.3.D
          && incoming.id == auth.uid // BL.CDT.4.D
          && incoming.uid == auth.uid // BL.CDT.5.D
          && incoming.value is number // BL.CDT.6.D
          && incoming.uploadIntentIds is map // BL.CDT.7.D
          && incoming.createdAt is timestamp // BL.CDT.8.D
          && incoming.updatedAt is timestamp // BL.CDT.9.D
          && incoming.currentUploadIntentNumber is number // BL.CDT.10.D
      }

      function canCreateBalance(){
        let incoming = getIncomingData();

        // BL.C.0.A
        return checkBalanceDocDataTypes() // BL.CDT.C
          && incoming.value == 0 // BL.C.1.D
          && incoming.uploadIntentIds == {} // BL.C.2.D
          && isNow(incoming.createdAt) // BL.C.3.D
          && isNow(incoming.updatedAt) // BL.C.4.D
          && incoming.currentUploadIntentNumber == 0 // BL.C.5.D
      }

      function canUpdateBalance(){
        let incoming = getIncomingData();
        let existing = getExistingData();
        let diff = incoming.diff(existing);
        let uploadIntentIdsDiff = existing.uploadIntentIds.diff(incoming.uploadIntentIds);
        let auth = getIncomingAuth();
        let currentUploadIntentId = auth.uid + '_' + string(incoming.currentUploadIntentNumber);
        let updatableKeys = ['value','currentUploadIntentNumber','uploadIntentIds','updatedAt'];

        // BL.U.0.A
        return checkBalanceDocDataTypes() // BL.CDT.U
          && diff.affectedKeys().hasOnly(updatableKeys) // BL.U.1.D
          && diff.affectedKeys().hasAll(updatableKeys) // BL.U.2.D
          && isNow(incoming.updatedAt) // BL.U.3.D
          && incoming.value == existing.value - 300 // BL.U.4.D
          && incoming.value >= 0 // BL.U.5.D 
          && incoming.currentUploadIntentNumber == existing.currentUploadIntentNumber + 1 // BL.U.6.D 
          && uploadIntentIdsDiff.affectedKeys().hasOnly([currentUploadIntentId]) // BL.U.7.D 
          && uploadIntentIdsDiff.affectedKeys().hasAll([currentUploadIntentId]) // BL.U.8.D
          && incoming.uploadIntentIds[currentUploadIntentId] == false // BL.U.9.D
      }

      function canGetBalance(id){
        let auth = getIncomingAuth();

        return id == auth.uid
      }
      
      allow create: if canCreateBalance();
      allow update: if canUpdateBalance();
      allow get: if canGetBalance(id);
      allow list: if false;
      allow delete: if false;
    }
    // match /files/{id} {
    //   function getFileKeys(){
    //     return ['id', 'uid', 'fileName', 'encryptedFileName', 'serializedEncryptionKeySalt', 'serializedInitializationVector', 'createdAt', 'updatedAt'];
    //   }
    //   function checkFileDataTypes(){
    //     let incoming = getIncomingData();
    //     let keys = getFileKeys();

    //     return incoming.keys().hasAll(keys)
    //       && incoming.keys().hasOnly(keys)
    //       && incoming.id == getIncomingId()
    //       && incoming.uid == getIncomingAuth().uid
    //       && incoming.fileName is string
    //       && incoming.encryptedFileName is string
    //       && incoming.serializedEncryptionKeySalt is string
    //       && incoming.serializedInitializationVector is string
    //       && incoming.createdAt is timestamp
    //       && incoming.updatedAt is timestamp
    //   }
    //   function canCreateFile(){
    //     let incoming = getIncomingData();
    //     let auth = getIncomingAuth();
    //     let balance = getBalanceDoc(auth.uid);
    //     let id = auth.uid + '_' + string(balance.couponStream) + '_' + string(balance.numberOfCoupons);

    //     return checkFileDataTypes()
    //       && incoming.id == id
    //       && isNow(incoming.createdAt)
    //       && isNow(incoming.updatedAt)
    //       && balance.numberOfCoupons > 0
    //   }
    //   function canGetFile(){
    //     let auth = getIncomingAuth();
    //     let existing = getExistingData();

    //     return existing.uid == auth.uid
    //   }

    //   function canListFiles(){
    //     let auth = getIncomingAuth();
    //     let params = getParams();

    //     return params.uid == auth.uid
    //   }
      
    //   allow create: if canCreateFile();
    //   allow get: if canGetFile();
    //   allow list: if canListFiles();
    //   allow update: if false;
    //   allow delete: if false;
    // }
    
    // match /paymentIntents/{id} {
    //   function getPaymentIntentKeys(){
    //     return ['id', 'uid', 'createdAt', 'updatedAt'];
    //   }
    //   function checkPaymentIntentDataTypes(){
    //     let incoming = getIncomingData();
    //     let keys = getPaymentIntentKeys();

    //     return incoming.keys().hasAll(keys)
    //       && incoming.keys().hasOnly(keys)
    //       && incoming.id == getIncomingId()
    //       && incoming.createdAt is timestamp
    //       && incoming.updatedAt is timestamp
    //   }
    //   function canCreatePaymentIntent(){
    //     let incoming = getIncomingData();
    //     let incomingId = getIncomingId();
    //     let auth = getIncomingAuth();
        
    //     return checkPaymentIntentDataTypes()
    //       && incoming.id == incomingId
    //       && incoming.uid == auth.uid
    //       && isNow(incoming.createdAt)
    //       && isNow(incoming.updatedAt)
    //   }

    //   allow create: if canCreatePaymentIntent();
    //   allow get: if false;
    //   allow list: if false;
    //   allow update: if false;
    //   allow delete: if false;
    // }
  }
}