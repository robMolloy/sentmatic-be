rules_version = '2';

function getIncomingAuth() {
  return request.auth;
}
function getIncomingId() {
  return request.resource.id;
}
function getIncomingData() {
  return request.resource.data;
}
function isNow(dt) {
  return dt is timestamp && dt == request.time;
}
function getExistingData() {
  return resource.data;
}
// function getParams() {
//   return resource.data;
// }

service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow create, update, get, list, delete: if false;
    }

    function getBalanceDoc(id){
      return get(/databases/$(database)/documents/balanceDocs/$(id)).data;
    }

    // function getFileDoc(id){
    //   return get(/databases/$(database)/documents/files/$(id)).data;
    // }

    match /balanceDocs/{id} {
      function getBalanceDocKeys(){
        return ['id','uid','value','currentUploadIntentNumber','uploadIntentIds','createdAt','updatedAt'];
      }
      function getUpdatableBalanceDocKeys(){
        return ['value','currentUploadIntentNumber','uploadIntentIds','updatedAt'];
      }

      function checkBalanceDocDataTypes(){
        let incoming = getIncomingData();
        let keys = getBalanceDocKeys();
        let auth = getIncomingAuth();

        return incoming.keys().hasAll(keys) // BL.CDT.1.D
          && incoming.keys().hasOnly(keys) // BL.CDT.2.D
          && incoming.id == getIncomingId() // BL.CDT.3.D
          && incoming.id == auth.uid // BL.CDT.4.D
          && incoming.uid == auth.uid // BL.CDT.5.D
          && incoming.value is number // BL.CDT.6.D
          && incoming.uploadIntentIds is map // BL.CDT.7.D
          && incoming.createdAt is timestamp // BL.CDT.8.D
          && incoming.updatedAt is timestamp // BL.CDT.9.D
          && incoming.currentUploadIntentNumber is number // BL.CDT.10.D
      }

      function canCreateBalance(){
        let incoming = getIncomingData();

        // BL.C.0.A
        return checkBalanceDocDataTypes() // BL.CDT.C
          && incoming.value == 0 // BL.C.1.D
          && incoming.uploadIntentIds == {} // BL.C.2.D
          && isNow(incoming.createdAt) // BL.C.3.D
          && isNow(incoming.updatedAt) // BL.C.4.D
          && incoming.currentUploadIntentNumber == 0 // BL.C.5.D
      }

      function canUpdateBalance(){
        let incoming = getIncomingData();
        let existing = getExistingData();
        let diff = incoming.diff(existing);
        let uploadIntentIdsDiff = existing.uploadIntentIds.diff(incoming.uploadIntentIds);
        let auth = getIncomingAuth();
        let currentUploadIntentId = auth.uid + '_' + string(incoming.currentUploadIntentNumber);
        let updatableKeys = getUpdatableBalanceDocKeys();

        // BL.U.0.A
        return checkBalanceDocDataTypes() // BL.CDT.U
          && diff.affectedKeys().hasOnly(updatableKeys) // BL.U.1.D
          && diff.affectedKeys().hasAll(updatableKeys) // BL.U.2.D
          && isNow(incoming.updatedAt) // BL.U.3.D
          && incoming.value == existing.value - 300 // BL.U.4.D
          && incoming.value >= 0 // BL.U.5.D 
          && incoming.currentUploadIntentNumber == existing.currentUploadIntentNumber + 1 // BL.U.6.D 
          && uploadIntentIdsDiff.affectedKeys().hasOnly([currentUploadIntentId]) // BL.U.7.D 
          && uploadIntentIdsDiff.affectedKeys().hasAll([currentUploadIntentId]) // BL.U.8.D
          && incoming.uploadIntentIds[currentUploadIntentId] == false // BL.U.9.D
      }

      function canGetBalance(){
        let auth = getIncomingAuth();
        let existing = getExistingData();

        // BL.G.0.A
        return existing.id == auth.uid // BL.G.1.D
      }
      
      allow create: if canCreateBalance();
      allow update: if canUpdateBalance();
      allow get: if canGetBalance();
      allow list: if false;
      allow delete: if false;
    }
    match /uploadIntentDocs/{id} {
      function getUploadIntentDocKeys(){
        return ['id', 'uid', 'createdAt', 'updatedAt'];
      }

      function checkUploadIntentDocDataTypes(){
        let incoming = getIncomingData();
        let keys = getUploadIntentDocKeys();

        return incoming.keys().hasAll(keys) // UI.CDT.1.D
          && incoming.keys().hasOnly(keys) // UI.CDT.2.D
          && incoming.id == getIncomingId() // UI.CDT.3.D
          && incoming.uid == getIncomingAuth().uid // UI.CDT.4.D
          && incoming.createdAt is timestamp // UI.CDT.5.D
          && incoming.updatedAt is timestamp // UI.CDT.6.D
      }
      function canCreateUploadIntentDoc() {
        let id = getIncomingId();
        let balanceDoc = getBalanceDoc(getIncomingAuth().uid); 

        // UI.C.0.A
        return checkUploadIntentDocDataTypes() // UI.CDT.C.1-6
          && id in balanceDoc.uploadIntentIds // UI.C.1.D
      }
      allow create: if canCreateUploadIntentDoc();
      allow update: if false;
      allow get: if false;
      allow list: if false;
      allow delete: if false;
    }
    
    match /paymentIntentDocs/{id} {
      function getPaymentIntentKeys(){
        return ['id', 'uid', 'isAccountDebitted', 'createdAt', 'updatedAt'];
      }
      function checkIncomingPaymentIntentDocData(){
        let incoming = getIncomingData();
        let keys = getPaymentIntentKeys();

        return incoming.keys().hasAll(keys) // PI.CDT.1.D
          && incoming.keys().hasOnly(keys) // PI.CDT.2.D
          && incoming.id == getIncomingId() // PI.CDT.3.D
          && incoming.uid == getIncomingAuth().uid // PI.CDT.4.D
          && incoming.isAccountDebitted is bool // PI.CDT.5.D
          && incoming.createdAt is timestamp // PI.CDT.6.D
          && incoming.updatedAt is timestamp // PI.CDT.7.D
      }
      function canCreatePaymentIntent(){
        let incoming = getIncomingData();
        
        return checkIncomingPaymentIntentDocData() // PI.CDT.C.1-7
          && incoming.isAccountDebitted == false // PI.C.1.D
          && isNow(incoming.createdAt) // PI.C.2.D
          && isNow(incoming.updatedAt) // PI.C.3.D
      }

      allow create: if canCreatePaymentIntent();
      allow get: if false;
      allow list: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}